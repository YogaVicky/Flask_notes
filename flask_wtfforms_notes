#basic ports
from flask_wtf import FlaskForm
from wtforms import StringField , PasswordField , SubmitField
from wtforms.validators import Datarequired , Length , Email , EqualTo

#demo registration form skeleton
class RegistrationForm(FlaskForm):
	#follows the structure of fieldname = Fieldtype ( 'label for the field' , validators = [] )
	username = StringField('Username',validators = [Datarequired() , Length(min = 2 , max = 20)])
    email = StringField('Email',validators = [Datarequired() , Email()])
    password = PasswordField('Password' , validators = [Datarequired()])
    confirm_password = PasswordField('Confirm Password' , validators = [Datarequired() , EqualTo('password')])
    submit = SubmitField('Sign Up')

#sample form inside the template

{% withmessages = get_flashed_messages(with_categories = true) %}#get the flashed messages in messages 
{% if messages %}
{% for category , message in messages %}#category used for giving the class input so that selective styling can be done
<p>{{message}}</p>
{%endfor%}
{%endif%}
{% endwith %}

<form method = "POST" action = "">
	{{ form.hidden_tag }} #CSFR token , gives protection
	{{form.username.label()}}#add classes inside the ()
	{%if form.username.errors %}#as a result of validation
    {{form.username()}}
    <div>
    {% for error in form.username.errors %}
    <span>{{error}}<span>
    {% endfor %}
    </div>
    {% else %}
	{{form.username()}}#add classes inside ()
	{% endif %}
</form>	

#inside the route function
@app.route("/register" , methods = ['GET' , 'POST'])
from flask import flash , render_template , redirect
def register():
	form = RegistrationForm()#create an instance of RegistrationForm
	if form.validate_on_submit():
		flash(f'Account created for {form.username.data}' , success)#pass on info and category
		return redirect(url_for('home'))
    return render_template('register.html',form = form)		


